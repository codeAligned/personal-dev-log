Scale on the Cloud
Many of todayâ€™s large scale concurrent systems rely on cloud computing platforms such as AWS or Google Cloud.

Describe how would you design a service using a common cloud computing platform such as AWS, to scale incrementally from supporting hundreds of users to millions of users.

For the purpose of the interview, assume the system generally receives user requests, does some processing, stores user data, and returns the results.

=======

Goal: design a cloud computing service like microsoft azure or amazon AWS that scales incrementally from supporting hundreds of users to millions of users

Focus on the part where the system receives user request, does some processing, stores user data, and returns the results

=======

Cloud computing
  - helps us to focus on software aspect instead of hardware
  - automatically scales based on needs
  - increases / decreases the cost based on needs

# ==============================================
Part 1: User Cases and Constraints
  - read and write a request to user data (for whatever app it may be)
  - cloud computing system must be flexible from dealing hundreds of users to millions of users

  constraints
    - has uneven distribution of traffic
    - 10 million clients
    - 100 billion read requests
    - 1 billion wrtie requests
      - edit/create of user data

    - 1 KB per write (roughly about a paragraph of data)

  back-to-envelope calculation
    - 1 000 byte * 1 billion = 1 trillion byte
      - 1TB of data per month
      - 12TB of data per Year
      - 48 TB of data in 4 years

    - ~40,000 read requests per second
    - 400 write requests per second

# ==============================================
Part 2: High Level Design
  - See scale_on_the_cloud_part2.png

# ==============================================
Part 3: Designing Core Concepts (basic design)

  points to consider when designing system
    1. scalability (1-50 users)
      - vertical scaling
        - increase resources when on demand by increasing CPU or RAM
          - upgrading of RAM (16GB -> 32GB)
          - upgrading of CPU (i5 -> i7)

        - how to scale
          - monitor resources such as CPU or RAM -> make decision which to scale

    2. durability (ability to hold data after crash)
      - relational database
        - data is stored in hard drive (SSD --> can retrieve data at a very fast rate)

      other advantages
        - it's well known with huge community
        - it's well battle tested
        - it has a clear pattern for scaling
        - it can look up by indexes super fast

    3. security (ability to safely deliver data to and from client)

      - ssh certificate (encrypt inbounding and outbounding data) --> makes it hard to see what's inside
      - send information to port that's necessary
        - HTTPS: 443
        - whitelisted ips: 22

      - use parametrized query to prevent sql injection attack

        i.e. 'SELECT * from USERS WHERE email = ?'

      - principle of least privileges

        - i.e. user gives READ and WRTIE request only to THAT USER, so damage is within that user only.

    4. DNS
      - USE ROUTE 53 or other DNS service providers

# ==============================================
part 4: Scaling the Design

1 - 50
  - uses vertical scaling
  - db is inside the web server
  - img, js or css are all inclded in web server

50 - 1000
  - uses vertical scaling
  - seperate images css, js and videos into a db called "object store"
    - to reduce load put onto system
  -

1000 - 100,000
  - use horizontal scaling
  - use load balancer
  - master slave sql
    - can create many instances under read request. (can imrpove reading speed)
    -

100,000 - 1 million
  - uses horizontal scaling
  - use load balancer
  - uses auto scaling to scale components in need
  - cache to reduce get time in READ API
  - use master-slave database


1 million - 10 millions
  - use horizontal scaling
  - use load balancer
  - auto scale
  - CDN to load big files such as angular.js from anoter aserver (reduce load onto our system)
  - read API --> use memcache to boost the operation
